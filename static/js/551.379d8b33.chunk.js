"use strict";(self.webpackChunk_kentcdodds_react_fundamentals=self.webpackChunk_kentcdodds_react_fundamentals||[]).push([[551],{5551:function(e,n,t){t.r(n),n.default='\x3c!-- Using JSX --\x3e\n\x3c!-- http://localhost:3000/isolated/exercise/03.html --\x3e\n\n\x3c!-- ###Using JSX### --\x3e\n\n\x3c!-- <body>\n  <div id="root"></div>\n  <script src="https://unpkg.com/react@18.1.0/umd/react.development.js"><\/script>\n  <script src="https://unpkg.com/react-dom@18.1.0/umd/react-dom.development.js"><\/script> --\x3e\n\n  \x3c!-- \ud83d\udc28 add Babel to the page.\n       \ud83d\udcb0 Here is the script tag that\'ll do the job:\n  <script src="https://unpkg.com/@babel/standalone@7.12.4/babel.js"><\/script>\n  --\x3e\n  \x3c!-- <script src="https://unpkg.com/@babel/standalone@7.12.4/babel.js"><\/script>\n\n  <script type="text/babel">\n    // \ud83d\udc28 on the script tag above, change `type="module"`\n    // to `type="text/babel"` so babel will compile this code for the browser to run.\n\n    // \ud83d\udc28 re-implement this using JSX!\n    // const element = React.createElement(\'div\', {\n    //   className: \'container\',\n    //   children: \'Hello World\',\n    // })\n    const element = <div className=\'container\'>Hello World</div>\n\n    // \ud83d\udcb0 there are a few subtle differences between JSX and HTML. One such\n    // difference is how you apply a class to an element in JSX is by using\n    // `className` rather than `class`!\n    // \ud83d\udcdc You can learn the differences between JSX and HTML syntax from the React docs here:\n    // https://react.dev/reference/react-dom/components/common\n\n    ReactDOM.createRoot(document.getElementById(\'root\')).render(element)\n  <\/script>\n</body> --\x3e\n\n\x3c!-- ###Extra Credit - interpolate className and children### --\x3e\n\n\x3c!-- <body>\n  <div id="root"></div>\n  <script src="https://unpkg.com/react@18.1.0/umd/react.development.js"><\/script>\n  <script src="https://unpkg.com/react-dom@18.1.0/umd/react-dom.development.js"><\/script> --\x3e\n\n  \x3c!-- \ud83d\udc28 add Babel to the page.\n       \ud83d\udcb0 Here is the script tag that\'ll do the job:\n  <script src="https://unpkg.com/@babel/standalone@7.12.4/babel.js"><\/script>\n  --\x3e\n  \x3c!-- <script src="https://unpkg.com/@babel/standalone@7.12.4/babel.js"><\/script>\n\n  <script type="text/babel">\n    // \ud83d\udc28 on the script tag above, change `type="module"`\n    // to `type="text/babel"` so babel will compile this code for the browser to run.\n\n    // \ud83d\udc28 re-implement this using JSX!\n    // const element = React.createElement(\'div\', {\n    //   className: \'container\',\n    //   children: \'Hello World\',\n    // })\n    const classname = \'container\';\n    const children = \'Hello World\';\n\n    const element = <div className={classname}>{children}</div>\n\n    // \ud83d\udcb0 there are a few subtle differences between JSX and HTML. One such\n    // difference is how you apply a class to an element in JSX is by using\n    // `className` rather than `class`!\n    // \ud83d\udcdc You can learn the differences between JSX and HTML syntax from the React docs here:\n    // https://react.dev/reference/react-dom/components/common\n\n    ReactDOM.createRoot(document.getElementById(\'root\')).render(element)\n  <\/script>\n</body> --\x3e\n\n\x3c!-- ###Extra Credit - spread props### --\x3e\n\n<body>\n  <div id="root"></div>\n  <script src="https://unpkg.com/react@18.1.0/umd/react.development.js"><\/script>\n  <script src="https://unpkg.com/react-dom@18.1.0/umd/react-dom.development.js"><\/script>\n\n  \x3c!-- \ud83d\udc28 add Babel to the page.\n       \ud83d\udcb0 Here is the script tag that\'ll do the job:\n  <script src="https://unpkg.com/@babel/standalone@7.12.4/babel.js"><\/script>\n  --\x3e\n  <script src="https://unpkg.com/@babel/standalone@7.12.4/babel.js"><\/script>\n\n  <script type="text/babel">\n    // \ud83d\udc28 on the script tag above, change `type="module"`\n    // to `type="text/babel"` so babel will compile this code for the browser to run.\n\n    // \ud83d\udc28 re-implement this using JSX!\n    // const element = React.createElement(\'div\', {\n    //   className: \'container\',\n    //   children: \'Hello World\',\n    // })\n    const children = \'Hello World\';\n    const className = \'container\';\n    const props = {children, className};\n\n    const element = <div {...props}/>\n\n    // \ud83d\udcb0 there are a few subtle differences between JSX and HTML. One such\n    // difference is how you apply a class to an element in JSX is by using\n    // `className` rather than `class`!\n    // \ud83d\udcdc You can learn the differences between JSX and HTML syntax from the React docs here:\n    // https://react.dev/reference/react-dom/components/common\n\n    ReactDOM.createRoot(document.getElementById(\'root\')).render(element)\n  <\/script>\n</body>'}}]);
//# sourceMappingURL=551.379d8b33.chunk.js.map