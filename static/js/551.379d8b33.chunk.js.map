{"version":3,"file":"static/js/551.379d8b33.chunk.js","mappings":"4JAAA,yoJ","sources":["exercise/03.html"],"sourcesContent":["export default \"<!-- Using JSX -->\\n<!-- http://localhost:3000/isolated/exercise/03.html -->\\n\\n<!-- ###Using JSX### -->\\n\\n<!-- <body>\\n  <div id=\\\"root\\\"></div>\\n  <script src=\\\"https://unpkg.com/react@18.1.0/umd/react.development.js\\\"></script>\\n  <script src=\\\"https://unpkg.com/react-dom@18.1.0/umd/react-dom.development.js\\\"></script> -->\\n\\n  <!-- 🐨 add Babel to the page.\\n       💰 Here is the script tag that'll do the job:\\n  <script src=\\\"https://unpkg.com/@babel/standalone@7.12.4/babel.js\\\"></script>\\n  -->\\n  <!-- <script src=\\\"https://unpkg.com/@babel/standalone@7.12.4/babel.js\\\"></script>\\n\\n  <script type=\\\"text/babel\\\">\\n    // 🐨 on the script tag above, change `type=\\\"module\\\"`\\n    // to `type=\\\"text/babel\\\"` so babel will compile this code for the browser to run.\\n\\n    // 🐨 re-implement this using JSX!\\n    // const element = React.createElement('div', {\\n    //   className: 'container',\\n    //   children: 'Hello World',\\n    // })\\n    const element = <div className='container'>Hello World</div>\\n\\n    // 💰 there are a few subtle differences between JSX and HTML. One such\\n    // difference is how you apply a class to an element in JSX is by using\\n    // `className` rather than `class`!\\n    // 📜 You can learn the differences between JSX and HTML syntax from the React docs here:\\n    // https://react.dev/reference/react-dom/components/common\\n\\n    ReactDOM.createRoot(document.getElementById('root')).render(element)\\n  </script>\\n</body> -->\\n\\n<!-- ###Extra Credit - interpolate className and children### -->\\n\\n<!-- <body>\\n  <div id=\\\"root\\\"></div>\\n  <script src=\\\"https://unpkg.com/react@18.1.0/umd/react.development.js\\\"></script>\\n  <script src=\\\"https://unpkg.com/react-dom@18.1.0/umd/react-dom.development.js\\\"></script> -->\\n\\n  <!-- 🐨 add Babel to the page.\\n       💰 Here is the script tag that'll do the job:\\n  <script src=\\\"https://unpkg.com/@babel/standalone@7.12.4/babel.js\\\"></script>\\n  -->\\n  <!-- <script src=\\\"https://unpkg.com/@babel/standalone@7.12.4/babel.js\\\"></script>\\n\\n  <script type=\\\"text/babel\\\">\\n    // 🐨 on the script tag above, change `type=\\\"module\\\"`\\n    // to `type=\\\"text/babel\\\"` so babel will compile this code for the browser to run.\\n\\n    // 🐨 re-implement this using JSX!\\n    // const element = React.createElement('div', {\\n    //   className: 'container',\\n    //   children: 'Hello World',\\n    // })\\n    const classname = 'container';\\n    const children = 'Hello World';\\n\\n    const element = <div className={classname}>{children}</div>\\n\\n    // 💰 there are a few subtle differences between JSX and HTML. One such\\n    // difference is how you apply a class to an element in JSX is by using\\n    // `className` rather than `class`!\\n    // 📜 You can learn the differences between JSX and HTML syntax from the React docs here:\\n    // https://react.dev/reference/react-dom/components/common\\n\\n    ReactDOM.createRoot(document.getElementById('root')).render(element)\\n  </script>\\n</body> -->\\n\\n<!-- ###Extra Credit - spread props### -->\\n\\n<body>\\n  <div id=\\\"root\\\"></div>\\n  <script src=\\\"https://unpkg.com/react@18.1.0/umd/react.development.js\\\"></script>\\n  <script src=\\\"https://unpkg.com/react-dom@18.1.0/umd/react-dom.development.js\\\"></script>\\n\\n  <!-- 🐨 add Babel to the page.\\n       💰 Here is the script tag that'll do the job:\\n  <script src=\\\"https://unpkg.com/@babel/standalone@7.12.4/babel.js\\\"></script>\\n  -->\\n  <script src=\\\"https://unpkg.com/@babel/standalone@7.12.4/babel.js\\\"></script>\\n\\n  <script type=\\\"text/babel\\\">\\n    // 🐨 on the script tag above, change `type=\\\"module\\\"`\\n    // to `type=\\\"text/babel\\\"` so babel will compile this code for the browser to run.\\n\\n    // 🐨 re-implement this using JSX!\\n    // const element = React.createElement('div', {\\n    //   className: 'container',\\n    //   children: 'Hello World',\\n    // })\\n    const children = 'Hello World';\\n    const className = 'container';\\n    const props = {children, className};\\n\\n    const element = <div {...props}/>\\n\\n    // 💰 there are a few subtle differences between JSX and HTML. One such\\n    // difference is how you apply a class to an element in JSX is by using\\n    // `className` rather than `class`!\\n    // 📜 You can learn the differences between JSX and HTML syntax from the React docs here:\\n    // https://react.dev/reference/react-dom/components/common\\n\\n    ReactDOM.createRoot(document.getElementById('root')).render(element)\\n  </script>\\n</body>\";"],"names":[],"sourceRoot":""}